@GetMapping("/getBusRouteList")
	@ResponseBody
	public List<BusRouteDto> getBusRouteList(@RequestParam("citycode") String citycode, @RequestParam("routeid") String routeid) {
		
		System.out.println("버스 노선 정보 조회 요청");
		return tagoService.findBusRouteList(citycode,routeid);
	}
======================================================
package hsm.bootproject.tagoProject.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

import hsm.bootproject.tagoProject.apiUtil.TagoRequestService;
import hsm.bootproject.tagoProject.domain.BusRoute;
import hsm.bootproject.tagoProject.dto.BusRouteDto;
import hsm.bootproject.tagoProject.repository.BusRouteRepository;

@Service
public class TagoService {

	
	@Autowired
	private TagoRequestService tagoRequestService;
	
	@Autowired
	private BusRouteRepository busRouteRepository;

	
	public List<BusRouteDto> findBusRouteList(String citycode, String routeid) {
		// BusRoute Repository 에서 버스 노선 정보를 조회
		List<BusRoute> busRouteList = busRouteRepository.findByRouteid(routeid);
		List<BusRouteDto> dtoList = new ArrayList<>();
		if(!busRouteList.isEmpty()) {
			// 조회 결과가 있으면 DTO 반환
			System.out.println("repository에 있음");
			//busRouteList >> dtoList 변환
			for(BusRoute busRoute : busRouteList) {
				dtoList.add(  new BusRouteDto(busRoute) );
			}
		
		}else {
			
			// 조회 결과가 없으면 TAGO API 버스 노선 정보 요청
			String reponse = tagoRequestService.getBusRouteList(citycode, routeid);
			
			Gson gson = new GsonBuilder().setPrettyPrinting().create();
			
			JsonArray itemArr = JsonParser.parseString(reponse).getAsJsonObject()
								.get("response").getAsJsonObject()
								.get("body").getAsJsonObject()
								.get("items").getAsJsonObject()
								.get("item").getAsJsonArray();
			
			System.out.println(itemArr);
			
			// List<BusRouteDto> 타입으로 변환
			for(JsonElement item : itemArr) {
				BusRouteDto dto = gson.fromJson(item, BusRouteDto.class);
				dtoList.add(dto);
			}
			//BusRoute 엔티티로 변환 BusRoute Repository에 save
			busRouteRepository.saveAll(busRouteList);
		}
		// dtoList >> 전체 버스 노선 정보
		
				// TAGO - 버스 위치 정보 조회 (노선별 버스 위치 목록 조회)
				String locResponse = tagoRequestService.getBusLocation(citycode, routeid);
				JsonElement itemElement = JsonParser.parseString(locResponse).getAsJsonObject()
		                .get("response").getAsJsonObject()
		                .get("body").getAsJsonObject()
		                .get("items").getAsJsonObject()
		                .get("item");
				List<String> nodeidList = new ArrayList<>();
				if(itemElement.isJsonArray()) {
					for(JsonElement el : itemElement.getAsJsonArray() ) {
						nodeidList.add( el.getAsJsonObject().get("nodeid").getAsString()  );
					}
				} else {
					nodeidList.add( itemElement.getAsJsonObject().get("nodeid").getAsString()  );
				}
				
				for(BusRouteDto busRouteDto : dtoList) {
					// 현재 버스가 busRouteDto에 위치해 있으면
					if( nodeidList.contains(busRouteDto.getNodeid())  ) {
						busRouteDto.setTrue(true);
					}
				}
				// dto 출력

		
		return dtoList;
	}
	
	
}
==================================================================================================

	public String getBusLocation(String citycode, String routeid) {
		// API 요청 >> 응답 데이터 반환
		try (CloseableHttpClient httpclient = HttpClients.createDefault()) {
		    ClassicHttpRequest httpGet = ClassicRequestBuilder.get("http://apis.data.go.kr/1613000/BusLcInfoInqireService/getRouteAcctoBusLcList")
		            .addParameter("serviceKey", APIKEY)
		            .addParameter("numOfRows", "200")
		            .addParameter("_type", "json")
		            .addParameter("cityCode", citycode)
		            .addParameter("routeId", routeid)
		    		.build();
		  String data = httpclient.execute(httpGet, response -> {
		        System.out.println(response.getCode() + " " + response.getReasonPhrase());
		        final HttpEntity entity1 = response.getEntity();
		        String resData = EntityUtils.toString(entity1);
		        EntityUtils.consume(entity1);
		        return resData;
		    });
		  return data;
		  
		} catch(Exception e) {
			e.printStackTrace();
			return null;
		}
	}		
====================================================================================================
	<!-- 카카오지도 스크립트 -->
	<script type="text/javascript"
		src="//dapi.kakao.com/v2/maps/sdk.js?appkey=b8e26722296f14daabe0f6486e648043"></script>
	<script type="text/javascript">
 	var container = document.getElementById('map'); //지도를 담을 영역의 DOM 레퍼런스
	var options = { //지도를 생성할 때 필요한 기본 옵션
 	center: new kakao.maps.LatLng(37.481799, 126.645130), //지도의 중심좌표.
 	level: 5 //지도의 레벨(확대, 축소 정도)
 };
 	var map = new kakao.maps.Map(container, options); //지도 생성 및 객체 리턴
 	
 	// 지도에 마커를 표시하는 함수
 	let marker = null;
 	function setMarker(lat,lng){
 		if(marker != null){
 			// 아래 코드는 지도 위의 마커를 제거하는 코드입니다
 		 	marker.setMap(null);    
 		}
 		
 		
 	// 마커가 표시될 위치입니다 
 	var markerPosition  = new kakao.maps.LatLng(lat, lng); 

 	// 마커를 생성합니다
 	 marker = new kakao.maps.Marker({
 	    position: markerPosition
 	});
 	// 마커가 지도 위에 표시되도록 설정합니다
 	marker.setMap(map); 	
 	
 	// 지도를 마커 위치로 이동
    map.panTo(markerPosition);            
 	}
 	
 	kakao.maps.event.addListener(map, 'click', function(mouseEvent) {        
 	    
 	    // 클릭한 위도, 경도 정보를 가져옵니다 
 	    var latlng = mouseEvent.latLng;	
 	    getStationList(latlng.getLat(), latlng.getLng());
 	
 	});
 	
 	
 </script>

	<script type="text/javascript">
 	let gpsLati = "37.481799";
 	let gpsLong = "126.645130";
 	getStationList(gpsLati,gpsLong);
 	function getStationList(lat, lng){
 		$.ajax({
 			type: "get",
 			url: "/getStationList",
 			data: {'lat' : lat, 'lng' : lng},
 			dataType: 'json',
 			success : function(res){
 				console.log(res.response.body.items.item); //[ ]
 				showStationList( res.response.body.items.item )
 			}

 		});
 		
 	}
 	
 	const stationListBox = document.getElementById('stationList');
 	
 	function showStationList(stList){	
 		stationListBox.innerHTML="";
 		for(let st of stList){
 			console.log(st.nodenm)
 			stationListBox.innerHTML +=`<button type="button" data-bs-toggle="list"
				class="list-group-item list-group-item-action" onclick="getBusArriveInfo('${st.citycode}','${st.nodeid}','${st.gpslati}','${st.gpslong}')">${st.nodenm}</button>`;
 		}
 		
 	}
 	
 	function getBusArriveInfo(citycode, nodeid ,lat ,lng){ // 도시코드, 정류소 아이디
 		console.log("도시코드 : " + citycode)
 		console.log("정류소 아이디 : " + nodeid)
 		setMarker(lat, lng);
 		$.ajax({
 			type: "get",
 			url: "/getBusArriveInfo",
 			data: {'citycode' : citycode, 'nodeid' : nodeid},
 			dataType: 'json',
 			success : function(res){
 				console.log(res.response.body.items.item); //[ ]
 				showBusList(citycode ,res.response.body.items.item )
 			}

 		});
 	}
 	
 	const busListBox = document.getElementById('busList');
 	function showBusList(citycode,bsList){
 		busListBox.innerHTML = "";
 		for(let bt of bsList){
 			busListBox.innerHTML += `<button type="button" data-bs-toggle="modal"
 				data-bs-target="#busRouteModal"
 				onclick = "getBusRouteList('${citycode}','${bt.routeid}')"
				class="list-group-item list-group-item-action">${bt.routeno}번 ${bt.routetp} ${bt.arrprevstationcnt}개전</button>`;
 		}
 	}
 	const modalBodyEl = document.getElementById('modalBody');
 	function getBusRouteList(citycode,routeid){
 		// 도시코드, routeid로 버스 노선 목록 조회
 		$.ajax({
 			type: "get",
 			url: "/getBusRouteList",
 			data: {'citycode' : citycode, 'routeid' : routeid},
 			dataType: 'json',
 			success : function(res){
 				console.log(res.response.body.items.item); //[ ]
 				showBusRouteList(citycode ,res.response.body.items.item )
 			}

 		});
 	}
 	function showBusRouteList(citycode,routeList){
 		modalBodyEl.innerHTML = "";
 		for(let rt of routeList){
 			modalBodyEl.innerHTML += `<button type="button" data-bs-toggle="list"								
				class="list-group-item list-group-item-action">${rt.nodenm}</button>`;
 		}
 	}
 	
 </script>
</body>
