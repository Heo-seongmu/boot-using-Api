<button class="btn btn-warning" type="button" id="imgUploadBtn">이미지</button>
				</div>
					<input type="file" multiple="multiple" class="d-none" id="imgFile">
			</div>


			<div class="col-4">
				<div class="card">
					<div class="card-header">접속자 목록</div>
					<div class="card-body p-0">
						<div class="list-group" id="connectUserList">
							
						</div>
						<button onclick="allChat()" class="btn btn-secondary">전체 채팅</button>


	chatClient.subscribe("/ServerToClient/" +username, function(msg){
				showPrivateMsg(msg.body);
			});


		let privateTarget = null;
		function startPrivateChat(targetUser){
			privateTarget = targetUser;
		}
		
		function allChat(){
			privateTarget = null;
		}
		
		
		
		function sendMessage() {
			let sendObj = {
				'sender' : username,
				'content' : inputEl.value,
				'type' : 'CHAT',
				'target' : privateTarget
			}; // 전송할 메세지 object
			// input 태그에 입력한 값을 웹소켓 서버에 전송
			
			if(privateTarget){
				 chatClient.send("/ClientToServer/private", {}, JSON.stringify(sendObj));
			}else{
				chatClient
				.send("/ClientToServer/chat", {}, JSON.stringify(sendObj)); // 보내는 메세지 object >> String(JSON FORMAT)
				
			}
				inputEl.value = "";
		}

const imgFileEl = document.getElementById('imgFile');
		document.getElementById('imgUploadBtn').addEventListener('click',function(){
			imgFileEl.click();
		});
		
		// 이미지를 선택 한 후 이벤트
		imgFileEl.addEventListener('change',function(){
			// 파일 태그에서 선택한 파일
			const selectFile = imgFileEl.files;
			// 1. 이미즈를 서버에 업로드(ajax) >> 이미지가 저장된 경로 응답
			for(let img of selectFile){
				
			const formData = new FormData();
			formData.append('imgFile',img);
			
			$.ajax({
				url: "/img",
				type:"POST",
				data:formData,
				processData : false,	
				contentType : false,
				success:function(res){
					//alert("이미지 저장 경로 :" + res);
					let sendObj = {
							'sender' : username,
							'content' : res,
							'type' : 'IMAGE'
						}; // 전송할 메세지 object
						// input 태그에 입력한 값을 웹소켓 서버에 전송
						
						chatClient
								.send("/ClientToServer/chatImage", {}, JSON.stringify(sendObj));  
				}
			})
			}
			
			
			
			// 2. 이미지 저장 경로를 WebSocket으로 메세지 전송
			
		});
		
		function showImgMessage(msg){
			let msgObj = JSON.parse(msg);
			
			if (username != msgObj.sender) {
				chatBoxEl.innerHTML += `<div class="receiveMsg">
					<div>${msgObj.sender}</div>
					<div>
					<img class="img" src="${msgObj.content}">
					<span class="time">${msgObj.msgTime}</span>
					</div>
					
				</div>`;
			} else {
				chatBoxEl.innerHTML += `<div class="sendMsg">
					<div>
					<span class="time">${msgObj.msgTime}</span>
					<img class = "img" src="${msgObj.content}">
					</div>
				</div>`;
			}
			chatBoxEl.scrollTop = chatBoxEl.scrollHeight;
			
		}
		function showPrivateMsg(msg){
			let msgObj = JSON.parse(msg);

			if (username != msgObj.sender) {
				chatBoxEl.innerHTML += `<div class="PrivateReceiveMsg">
					<div>${msgObj.sender}</div>
					<div>
					<div class="msgContent">${msgObj.content}</div>
					<span class="time">${msgObj.msgTime}</span>
					</div>
					
				</div>`;
			} else {
				chatBoxEl.innerHTML += `<div class="PrivateSendMsg">
					<div>${msgObj.target}에게</div>
					<div>
					<span class="time">${msgObj.msgTime}</span>
					<div class="msgContent">${msgObj.content}</div>
					</div>
				</div>`;
			}
			chatBoxEl.scrollTop = chatBoxEl.scrollHeight;
		}
================================================================================================
@MessageMapping("/private")
	public void privateMessage(MessageDto msgDto) {
		System.out.println("클라이언트에서 보내는 메세지 : " + msgDto);
		// msgDto에 msgTime 채팅화면에 표시할 시간 추가
		LocalDateTime nowTime = LocalDateTime.now(); // 현재 시간
		String msgtime = nowTime.format( DateTimeFormatter.ofPattern("a h:mm",Locale.KOREAN) );
		msgDto.setMsgTime(msgtime);
		
		//repository에 save
		// dto를 entity로 변환
		ChatMessage chatMessage = new ChatMessage(msgDto);		
		//chatRepository.save(chatMessage); 
		
		// 서버가 모든 클라이언트들에게 메세지를 전파
		messagingTemplate.convertAndSend("/ServerToClient/" + msgDto.getTarget(),msgDto);
		messagingTemplate.convertAndSend("/ServerToClient/" + msgDto.getSender(),msgDto);
	}
============================================================================================
package hsm.bootproject.websocketProject.service;

import java.io.File;
import java.util.UUID;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

@Service
public class ChatService {

	public String chatImageUpload(MultipartFile imgFile){
		String originFileName = imgFile.getOriginalFilename(); // 클라이언트에서 업로드한 원본 파일명
		// 확장자가 시작되는 위치 확인
		int suffixIndex = originFileName.lastIndexOf("."); // 확장자가 시작되는 index
		// 확장자 부분 분리
		String suffix = originFileName.substring(suffixIndex);
		//uuid로 새로운 파일이름 생성(32자리 문자)
		String newFileName = UUID.randomUUID().toString() + suffix;
		
		String savePath = "C:/webSock";
		
		try {
			File file = new File(savePath, newFileName);
			imgFile.transferTo(file);
			return "/chatImage/" + newFileName;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
			
		
	}
	
}
==============================================================================================
package hsm.bootproject.websocketProject.sockUtil;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class ChatImgConfig implements WebMvcConfigurer{

	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		registry.addResourceHandler("/chatImage/**") // src 속성에 사용할 주소
				.addResourceLocations("file:" + "C:/webSock");
	}
	
}
===========================================================================================
