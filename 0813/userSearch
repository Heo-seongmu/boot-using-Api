package hsm.bootproject.websocketProject.domain;

import java.time.LocalDate;

import hsm.bootproject.websocketProject.dto.MessageDto;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import lombok.Getter;
import lombok.Setter;

@Entity
@Getter @Setter
public class ChatMessage {

	@Id
	@GeneratedValue
	private Long id;
	
	private String sender; 	// 메세지를 보내는 닉네임
	
	@Column(length = 3000)
	private String content; // 보내는 내용
	
	private String type;	// 메세지 유형 (CHAT, IN, OUT)
	
	private String msgTime;	// 채팅화면에 표시할 시간
	
	private LocalDate msgdate;	// 메세지 전송 날짜
	
	
	public ChatMessage() {
		
	}
	
	public ChatMessage(MessageDto messageDto) {
		this.sender = messageDto.getSender();
		this.content = messageDto.getContent();
		this.type = messageDto.getType();
		this.msgTime = messageDto.getMsgTime();
		msgdate = LocalDate.now();
	}
	
}
=========================================================================================================
package hsm.bootproject.websocketProject.dto;

import hsm.bootproject.websocketProject.domain.ChatMessage;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@Getter
@Setter
@ToString
public class MessageDto {

	private String sender; // 메세지를 보내는 닉네임

	private String content; // 보내는 내용

	private String type; // 메세지 유형 (CHAT, IN, OUT)

	private String msgTime; // 채팅화면에 표시할 시간

	public MessageDto() {
		
	}
	
	public MessageDto(ChatMessage chatMessage) {
		this.sender = chatMessage.getSender();
		this.content = chatMessage.getContent();
		this.type = chatMessage.getType();
		this.msgTime = chatMessage.getMsgTime();
	}
}
===========================================================================================================
<div class="container">
		<div class="row">
			<div class="col-7">
				<!-- 채팅을 출력할 요소 -->
				<div id="chatBox">
					<div th:each="chat : ${chatDtoList}">
						<!-- 받은 메세지 -->
						<div class="receiveMsg"
							th:if="${chat.sender != session.username and chat.type == 'CHAT'}">
							<div th:text="${chat.sender}"></div>
							<div>
								<div class="msgContent" th:text="${chat.content}"></div>
								<span th:text="${chat.msgTime}"></span>
							</div>

						</div>

						<!-- 내가 보낸 메세지 -->
						<div class="sendMsg"
							th:if="${chat.sender == session.username and chat.type == 'CHAT'}">
							<div>
								<span th:text="${chat.msgTime}"></span>
								<div class="msgContent" th:text="${chat.content}"></div>
							</div>
						</div>

						<div class="text-center my-2" th:if="${chat.type == 'INOUT'}">
							<div class="inoutMsg"
								th:text="|${chat.sender} 이/가 ${chat.content}하였습니다|"></div>
						</div>
					</div>

				</div>
				<div class="input-group mb-3">
					<input type="text" class="form-control" id="inputText">
					<button class="btn btn-outline-secondary" onclick="sendMessage()">전송</button>
				</div>
			</div>


			<div class="col-4">
				<div class="card">
					<div class="card-header">접속자 목록</div>
					<div class="card-body p-0">
						<div class="list-group" id="connectUserList">
							
						</div>


chatClient.subscribe("/ServerToClient/userList", function(msg){
				//접속자 목록 구독
				console.log(msg.body);
				showUserList(msg.body);
			});
			
			chatClient.subscribe("/ServerToClient/resList/" +username, function(msg){
				showUserList(msg.body);
			});
			
			// 서버에게 접속자 명단 요청 메세지 전송
				chatClient.send("/ClientToServer/reqList", {},username); 

		});
===========================================================================================================
package hsm.bootproject.websocketProject.controller;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Locale;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;

import hsm.bootproject.websocketProject.domain.ChatMessage;
import hsm.bootproject.websocketProject.dto.MessageDto;
import hsm.bootproject.websocketProject.repository.ChatRepository;
import hsm.bootproject.websocketProject.sockUtil.ConnectUser;
import jakarta.servlet.http.HttpSession;

@Controller
public class ChatController {
	// 웹소켓 메세지를 처리할 컨트롤러
	
	@Autowired
	private SimpMessagingTemplate messagingTemplate;
	
	@Autowired
	private ChatRepository chatRepository;
	
	@Autowired
	private HttpSession session;
	
	@Autowired
	private ConnectUser connectuser;
	
	@MessageMapping("/chat")
	public void sendMessage(MessageDto msgDto) {
		
		System.out.println("클라이언트에서 보내는 메세지 : " + msgDto);
		// msgDto에 msgTime 채팅화면에 표시할 시간 추가
		LocalDateTime nowTime = LocalDateTime.now(); // 현재 시간
		String msgtime = nowTime.format( DateTimeFormatter.ofPattern("a h:mm",Locale.KOREAN) );
		msgDto.setMsgTime(msgtime);
		
		//repository에 save
		// dto를 entity로 변환
		ChatMessage chatMessage = new ChatMessage(msgDto);		
		chatRepository.save(chatMessage); 
		
		// 서버가 모든 클라이언트들에게 메세지를 전파
		messagingTemplate.convertAndSend("/ServerToClient/publicMsg",msgDto);
	}
	
	@MessageMapping("/reqList")
	public void userListResponse(String username) {
		
		
		messagingTemplate.convertAndSend("/ServerToClient/resList/"+username,connectuser.getConnectList().values());
	}
	
}

======================================================================================================
package hsm.bootproject.websocketProject.sockUtil;

import java.time.LocalDate;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.event.EventListener;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.messaging.simp.stomp.StompHeaderAccessor;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.messaging.SessionConnectEvent;
import org.springframework.web.socket.messaging.SessionDisconnectEvent;

import hsm.bootproject.websocketProject.domain.ChatMessage;
import hsm.bootproject.websocketProject.dto.MessageDto;
import hsm.bootproject.websocketProject.repository.ChatRepository;

@Component
public class WebSocketInout {
	
	@Autowired
	private SimpMessagingTemplate messagingTemplate;
	
	@Autowired
	private ChatRepository chatRepository;
	
	@Autowired
	private ConnectUser connectuser; // 접속자 목록 관리 객체
	

	@EventListener
	public void chatConnect(SessionConnectEvent connectEvent) {
		System.out.println("웹 소켓 접속!-!");
		// 다른 클라이언트에게 입장 메세지 전송!
		// 접속한 클라이언트의 세션값(username)
		StompHeaderAccessor accessor = StompHeaderAccessor.wrap(connectEvent.getMessage());
		String username = (String)accessor.getSessionAttributes().get("username");
		ChatMessage chatMessage = new ChatMessage();
		chatMessage.setSender(username);
		chatMessage.setContent("입장");
		chatMessage.setType("INOUT");
		chatMessage.setMsgdate(LocalDate.now());
		
		chatRepository.save(chatMessage);
		
		messagingTemplate.convertAndSend("/ServerToClient/inout",new MessageDto(chatMessage));
		// 전체 접속자 명단 전송
		// 세션 id 확인
		String sessionid = accessor.getSessionId();
		System.out.println("입장한 id" + sessionid);
		// 접속 목록에 추가
		connectuser.addUser(sessionid, username);
		messagingTemplate.convertAndSend("/ServerToClient/userList",connectuser.getConnectList().values());
	}
	
	@EventListener
	public void chatDisconnect(SessionDisconnectEvent disconnectEvent) {
		System.out.println("웹 소켓 연결 해제 ㅜ!ㅜ");
		// 다른 클라이언트에게 퇴장 메세지 전송!
		
		StompHeaderAccessor accessor = StompHeaderAccessor.wrap(disconnectEvent.getMessage());
		String username = (String)accessor.getSessionAttributes().get("username");
		
		ChatMessage chatMessage = new ChatMessage();
		chatMessage.setSender(username);
		chatMessage.setContent("퇴장");
		chatMessage.setType("INOUT");
		chatMessage.setMsgdate(LocalDate.now());
		
		chatRepository.save(chatMessage);
		
		messagingTemplate.convertAndSend("/ServerToClient/inout",new MessageDto(chatMessage));
		// 전체 접속자 명단 전송
		String sessionid = accessor.getSessionId();
		System.out.println("퇴장한 id" + sessionid);
		// 접속 목록 삭제
		connectuser.removeUser(sessionid);
		messagingTemplate.convertAndSend("/ServerToClient/userList",connectuser.getConnectList().values());
	}
	
}
================================================================================================
package hsm.bootproject.websocketProject.sockUtil;

import java.util.HashMap;
import java.util.Map;

import org.springframework.stereotype.Component;

import lombok.Getter;
import lombok.Setter;

@Component
@Getter @Setter
public class ConnectUser { // 접속자 목록

	// {key : value}
	private Map<String,String> connectList = new HashMap<>();
	// 접속세션 : 접속자아이디
	
	public void addUser(String sessionid, String username) { // 접속정보를 connectList에 추가
		connectList.put(sessionid, username);
	}
	
	public void removeUser(String sessionid) {	//접속정보를 connectList에서 삭제
		connectList.remove(sessionid);
	}

	
}


